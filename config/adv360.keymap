/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hml: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <0>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75 37 38 53 68 69 70 71 35 36 52 65 66 67>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL  &kp N1             &kp N2           &kp N3           &kp N4        &kp N5  &tog 1                                                                        &mo 3         &kp N6  &kp N7                &kp N8            &kp N9            &kp N0                      &kp MINUS
&kp TAB    &kp Q              &kp W            &kp E            &kp R         &kp T   &kp LGUI                                                                      &kp LEFT_ALT  &kp Y   &kp U                 &kp I             &kp O             &kp P                       &kp BSLH
&lt 4 ESC  &hml LEFT_SHIFT A  &hml LEFT_GUI S  &hml LEFT_ALT D  &hml LCTRL F  &kp G   &kp LEFT_GUI   &kp LCTRL  &kp LEFT_ALT      &kp LEFT_GUI   &kp RIGHT_CONTROL  &kp LEFT_ALT  &kp H   &hmr RIGHT_CONTROL J  &hmr RIGHT_ALT K  &hmr RIGHT_GUI L  &hmr RIGHT_SHIFT SEMICOLON  &kp SQT
&kp LSHFT  &kp Z              &kp X            &kp C            &kp V         &kp B                             &kp LEFT_ALT      &kp RIGHT_GUI                                   &kp N   &kp M                 &kp COMMA         &kp DOT           &kp FSLH                    &kp RSHFT
&mo 2      &kp GRAVE          &kp TAB          &kp LEFT         &kp RIGHT             &kp BACKSPACE  &mo 4      &kp LALT          &kp LGUI       &kp ENTER          &kp SPACE             &kp DOWN              &kp UP            &kp LBKT          &kp RBKT                    &mo 2
            >;
        };

        layer_keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                   &mo 3      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                    &none      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 2
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4    &kp F5   &kp F6  &tog 1                                      &mo 3   &kp F7   &kp F8     &kp F9     &kp F10   &kp F11  &kp F12
&trans  &trans  &trans  &trans    &trans   &trans  &none                                       &none   &trans   &trans     &trans     &trans    &trans   &trans
&trans  &trans  &trans  &trans    &trans   &trans  &none   &trans  &trans      &trans  &trans  &none   &kp END  &kp PG_DN  &kp PG_UP  &kp HOME  &trans   &trans
&trans  &trans  &trans  &trans    &trans   &trans                  &trans      &trans                  &trans   &trans     &trans     &trans    &trans   &trans
&trans  &trans  &trans  &kp HOME  &kp END          &trans  &trans  &trans      &trans  &trans  &trans           &kp PG_DN  &kp PG_UP  &trans    &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_Braces {
            bindings = <
&trans  &trans            &trans             &trans                &trans                 &trans  &trans                                      &trans      &trans  &trans                &trans                 &trans            &trans             &trans
&trans  &kp LESS_THAN     &kp GREATER_THAN   &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans  &trans                                      &trans      &trans  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN     &kp GREATER_THAN   &trans
&trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans  &trans  &trans  &trans      &trans  &trans  &trans      &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans
&trans  &trans            &trans             &trans                &trans                 &trans                  &trans      &trans                      &trans  &trans                &trans                 &trans            &trans             &trans
&trans  &trans            &trans             &trans                &trans                         &trans  &trans  &trans      &trans  &trans  &kp DELETE          &trans                &trans                 &trans            &trans             &trans
            >;
        };

        layer_Layer__5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
